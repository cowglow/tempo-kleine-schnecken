{"version":3,"sources":["components/snail/snail-silhouette.svg","components/track/track.module.css","fixtures/colors.js","services/random-number.js","components/dice/dice.js","components/snail/snail.js","components/track/track.js","components/screen/screen.js","components/app/app.js","serviceWorker.js","index.js"],"names":["module","exports","colors","RandomNumber","max","Math","floor","random","Dice","faces","callback","length","button","React","createRef","useState","face","setFace","ref","onClick","randomIndex","newValue","id","color","style","padding","backgroundColor","Snail","verticalAlign","display","snailSvg","mask","Track","steps","currentPosition","player","className","track","Screen","diceValue","updateDiceValue","updateCurrentPosition","Fragment","console","log","JSON","stringify","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yHAAAA,EAAOC,QAAU,IAA0B,8C,kBCC3CD,EAAOC,QAAU,CAAC,MAAQ,uB,gKCQXC,EATA,CACb,UACA,UACA,UACA,UACA,UACA,WCFaC,EAJM,SAAAC,GACnB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWH,ICyCrBI,EArCF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACfN,EAAMK,EAAME,OACZC,EAASC,IAAMC,YAFe,EAGZD,IAAME,SAASN,EAAMN,EAAaC,KAHtB,mBAG7BY,EAH6B,KAGvBC,EAHuB,KAepC,OACE,4BACEC,IAAKN,EACLO,QAba,WACf,IAAMC,EAAcjB,EAAaC,GAC3BiB,EAAWZ,EAAMW,GACvBH,EAAQI,GACRX,EAAS,CACPY,GAAIF,EACJG,MAAOF,KAQPG,MAAO,CACLC,QAAS,OACTF,MAAO,UACPG,gBAAiBV,EACjB,UAAW,CACTO,MAAO,aARb,kB,gBCFWI,EAfD,SAAC,GAAe,IAAbJ,EAAY,EAAZA,MACf,OACE,0BACEC,MAAO,CACLE,gBAAiBH,EACjBK,cAAe,SACfC,QAAS,eACTJ,QAAS,OACT,eAAgB,QAAUK,IAAW,uBACrCC,KAAM,QAAUD,IAAW,2B,gBCDpBE,EARD,SAAC,GAA8C,EAA5CC,MAA4C,EAArCV,MAAqC,EAA9BW,gBAA8B,EAAbC,OAK9C,OAAO,yBAAKC,UAAWZ,IAAMa,QAHV,gBC4CNC,EAzCA,WAAO,IAAD,EACkBzB,IAAME,SAAS,CAClDO,GAAI,KACJC,MAAO,OAHU,mBACZgB,EADY,KACDC,EADC,OAK8B3B,IAAME,SAAS,GAL7C,mBAKZmB,EALY,KAKKO,EALL,KAenB,OACE,kBAAC,IAAMC,SAAP,KACE,kDACA,kBAAC,EAAD,CACET,MAAO/B,EAAOS,OACdY,MAAOrB,EAAO,GACdgC,gBAAiBA,EACjBC,OAAQ,kBAAC,EAAD,CAAOZ,MAAOrB,EAAO,OAG/B,gDACA,kBAAC,EAAD,CAAOqB,MAAOgB,EAAUhB,QAExB,8CACA,kBAAC,EAAD,CAAMd,MAAOP,EAAQQ,SAtBR,SAAAM,GACfwB,EAAgBxB,GAChByB,EACEP,GAAmBhC,EAAOS,OAASuB,EAAkB,EAAI,GAE3DS,QAAQC,IAAI,mBAAoBV,MAmB9B,8DACCW,KAAKC,UAAU5C,EAAQ,KAAM,KCtBrB6C,G,MAbH,WACV,OACE,yBAAKX,UAAU,OACb,qDACyB,2CAEzB,4BAAQA,UAAU,eAChB,kBAAC,EAAD,UCDYY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c0e6df54.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/snail-silhouette.90401f08.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"track\":\"track_track__sG6US\"};","const colors = [\n  \"#A93226\",\n  \"#884EA0\",\n  \"#3498DB\",\n  \"#27AE60\",\n  \"#F4D03F\",\n  \"#E67E22\"\n];\n\nexport default colors;\n","const RandomNumber = max => {\n  return Math.floor(Math.random() * max);\n};\n\nexport default RandomNumber;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport RandomNumber from \"../../services/random-number\";\n\nconst Dice = ({ faces, callback }) => {\n  const max = faces.length;\n  const button = React.createRef();\n  const [face, setFace] = React.useState(faces[RandomNumber(max)]);\n\n  const rollDice = () => {\n    const randomIndex = RandomNumber(max);\n    const newValue = faces[randomIndex];\n    setFace(newValue);\n    callback({\n      id: randomIndex,\n      color: newValue\n    });\n  };\n\n  return (\n    <button\n      ref={button}\n      onClick={rollDice}\n      style={{\n        padding: \"1rem\",\n        color: \"#ffffff\",\n        backgroundColor: face,\n        \":active\": {\n          color: \"#000000\"\n        }\n      }}\n    >\n      Click To Roll\n    </button>\n  );\n};\n\nDice.propTypes = {\n  faces: PropTypes.array.isRequired\n};\n\nexport default Dice;\n","import React from \"react\";\n\nimport snailSvg from \"./snail-silhouette.svg\";\n\nconst Snail = ({ color }) => {\n  return (\n    <span\n      style={{\n        backgroundColor: color,\n        verticalAlign: \"center\",\n        display: \"inline-block\",\n        padding: \"5rem\",\n        \"-webkit-mask\": 'url(\"' + snailSvg + '\") no-repeat 50% 50%',\n        mask: 'url(\"' + snailSvg + '\") no-repeat 50% 50%'\n      }}\n    />\n  );\n};\n\nexport default Snail;\n","import React from \"react\";\n\nimport style from \"./track.module.css\";\n\nconst Track = ({ steps, color, currentPosition, player }) => {\n\n  const trackSteps = ()=>{\n  }\n\n  return <div className={style.track}>{trackSteps}</div>;\n};\n\nexport default Track;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport colors from \"../../fixtures/colors\";\n\nimport Dice from \"../dice/dice\";\nimport Snail from \"../snail/snail\";\nimport Track from \"../track/track\";\n\nconst Screen = () => {\n  const [diceValue, updateDiceValue] = React.useState({\n    id: null,\n    color: null\n  });\n  const [currentPosition, updateCurrentPosition] = React.useState(0);\n\n  const rollDice = face => {\n    updateDiceValue(face);\n    updateCurrentPosition(\n      currentPosition != colors.length ? currentPosition + 1 : 0\n    );\n    console.log(\"currentPosition:\", currentPosition);\n  };\n\n  return (\n    <React.Fragment>\n      <p>I need a the tracks</p>\n      <Track\n        steps={colors.length}\n        color={colors[0]}\n        currentPosition={currentPosition}\n        player={<Snail color={colors[0]} />}\n      />\n\n      <p>I need the snails</p>\n      <Snail color={diceValue.color} />\n\n      <p>I need the dice</p>\n      <Dice faces={colors} callback={rollDice} />\n\n      <p>I need the colors configuration</p>\n      {JSON.stringify(colors, null, 2)}\n    </React.Fragment>\n  );\n};\n\nScreen.propTypes = {\n  id: PropTypes.any\n};\n\nexport default Screen;\n","import React from \"react\";\n\nimport Screen from \"../screen/screen\";\n\nimport \"./app.styles.css\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <p>\n        tempo-kleine-schnecken <button>Button</button>\n      </p>\n      <header className=\"App-content\">\n        <Screen />\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/main.css';\nimport App from './components/app/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}